{"version":3,"sources":["axios.js","features/user/userSlice.js","Login.js","SignUp.js","LandingPage.js","MyData.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","headers","userSlice","createSlice","name","initialState","user_uid","user_name","user_email","user_state","reducers","Log_in","state","action","payload","_id","email","actions","select_id","user","selectName","selectEmail","Login","useState","setemail","password","setpassword","dispatch","useDispatch","history","useHistory","e","a","preventDefault","post","then","response","console","log","data","alert","push","catch","error","className","value","onChange","target","type","placeholder","to","onClick","SignUp","setname","required","LandingPage","src","alt","MyData","id","useParams","userDetails","setuserDetails","useEffect","get","date","send_to_mongodb_login","replace","App","useSelector","path","exact","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a52eebd6.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst instance = axios.create({\r\n      baseURL: \"https://fullstack-me-next-year.herokuapp.com\",\r\n      headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n});\r\n\r\nexport default instance;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n      name: \"user\",\r\n      initialState: {\r\n            user_uid: null,\r\n            user_name: null,\r\n            user_email: null,\r\n            user_state: null,\r\n      },\r\n\r\n      reducers: {\r\n            Log_in: (state, action) => {\r\n                  state.user_uid = action.payload._id;\r\n                  state.user_name = action.payload.name;\r\n                  state.user_email = action.payload.email;\r\n                  state.user_state = true;\r\n            },\r\n      },\r\n});\r\n\r\nexport const { Log_in } = userSlice.actions;\r\n\r\nexport const select_id = (state) => state.user.user_uid;\r\nexport const selectName = (state) => state.user.user_name;\r\nexport const selectEmail = (state) => state.user.user_email;\r\nexport const selecteState = (state) => state.user.user_state;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Login.css\";\r\nimport axios from \"./axios\";\r\nimport { Log_in } from \"./features/user/userSlice\";\r\nconst Login = () => {\r\n      const [email, setemail] = useState(\"@gmail.com\");\r\n      const [password, setpassword] = useState(\"\");\r\n      const dispatch = useDispatch();\r\n      const history = useHistory();\r\n      async function send_to_mongodb_login(e) {\r\n            e.preventDefault();\r\n            await axios\r\n                  .post(\"/api/user/login\", { email, password })\r\n                  .then((response) => {\r\n                        console.log(response.data);\r\n                        if (response.data) {\r\n                              alert(\"succes in login \");\r\n                              dispatch(\r\n                                    Log_in({\r\n                                          _id: response.data._id,\r\n                                          name: response.data.name,\r\n                                          email: response.data.email,\r\n                                    })\r\n                              );\r\n                              history.push(\"/landingpage\");\r\n                        } else {\r\n                              alert(\"Invalid Details\");\r\n                        }\r\n                  })\r\n                  .catch((error) => console.log(\"error in login \" + error));\r\n      }\r\n      return (\r\n            <div className=\"main\">\r\n                  <h1>Login</h1>\r\n                  <hr />\r\n                  <h3>Welcome to Login page</h3>\r\n                  <input value={email} onChange={(e) => setemail(e.target.value)} type=\"email\" placeholder=\"Email\" />\r\n                  <input\r\n                        value={password}\r\n                        onChange={(e) => setpassword(e.target.value)}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                  />\r\n                  <p>\r\n                        Not a member?\r\n                        <Link to=\"/signup\">\r\n                              <span className=\"span\">\r\n                                    <u>Register</u>\r\n                              </span>\r\n                        </Link>\r\n                  </p>\r\n                  <button onClick={send_to_mongodb_login} type=\"submit\">\r\n                        Log In\r\n                  </button>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport \"./Login.css\";\r\nimport axios from \"./axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst SignUp = () => {\r\n      const [name, setname] = useState(\"\");\r\n      const [email, setemail] = useState(\"@gmail.com\");\r\n      const [password, setpassword] = useState(\"\");\r\n      const history = useHistory();\r\n      async function send_to_mongoDB() {\r\n            const request = await axios\r\n                  .post(\"/api/user/register\", {\r\n                        name,\r\n                        email,\r\n                        password,\r\n                  })\r\n                  .then((response) => {\r\n                        {\r\n                              if (!response.data) {\r\n                                    alert(\"Incomplete Details, Please Try Again.\");\r\n                              } else {\r\n                                    alert(\"Successfully Signed Up\");\r\n                                    history.push(\"/\");\r\n                              }\r\n                        }\r\n                  })\r\n                  .catch((error) => console.log(\"error from register \" + error));\r\n      }\r\n\r\n      return (\r\n            <div className=\"main\">\r\n                  <h1>Sign Up</h1>\r\n                  <hr />\r\n                  <h3>Welcome to SignUp page</h3>\r\n                  <input\r\n                        value={name}\r\n                        onChange={(e) => setname(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Name\"\r\n                        required\r\n                  />\r\n                  <input\r\n                        value={email}\r\n                        onChange={(e) => setemail(e.target.value)}\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        required\r\n                  />\r\n                  <input\r\n                        value={password}\r\n                        onChange={(e) => setpassword(e.target.value)}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        required\r\n                  />\r\n                  <button onClick={send_to_mongoDB} type=\"submit\">\r\n                        Sign Up\r\n                  </button>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./LandingPage.css\";\r\n\r\nconst LandingPage = ({ _id, name }) => {\r\n      const history = useHistory();\r\n      const MyDataPage = () => {\r\n            history.push(`/MyData/${_id}`);\r\n      };\r\n\r\n      return (\r\n            <div className=\"landingpage\">\r\n                  <div onClick={MyDataPage} className=\"buttons\">\r\n                        <button>My Data</button>\r\n                  </div>\r\n                  <h3>Welcome {name}</h3>\r\n                  <p>You will be here next Year</p>\r\n                  <img src=\"https://source.unsplash.com/collection/8806655/1600x900\" alt=\"\" />\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./MyData.css\";\r\nimport axios from \"./axios\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst MyData = () => {\r\n      const { id } = useParams();\r\n      const [userDetails, setuserDetails] = useState(\"\");\r\n      const history = useHistory();\r\n      useEffect(() => {\r\n            async function send_to_mongodb_login(e) {\r\n                  const request = await axios\r\n                        .get(`/api/user/MyData/${id}`)\r\n                        .then((response) =>\r\n                              setuserDetails({\r\n                                    _id: response.data._id,\r\n                                    name: response.data.name,\r\n                                    email: response.data.email,\r\n                                    // decryptedPassword: response.data.password,\r\n                                    date: response.data.date,\r\n                              })\r\n                        )\r\n                        .catch((error) => console.log(\"error in fetching MyData: \" + error));\r\n            }\r\n            send_to_mongodb_login();\r\n      }, []);\r\n      const deleteMyData = () => {\r\n            axios.get(`/api/user/MyData/delete/${id}`)\r\n                  .then((response) => {\r\n                        alert(\" MyData permanently Deleted from Database.\");\r\n                        history.replace(\"/\");\r\n                  })\r\n                  .catch((error) => console.log(\"error in deleting myData: \" + error));\r\n      };\r\n\r\n      console.log(\"logging user details\", userDetails);\r\n      return (\r\n            <div className=\"MyData\">\r\n                  <h3>MyData</h3>\r\n                  <table>\r\n                        <tbody>\r\n                              <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    {/* <th>Decrypted Password</th> */}\r\n                                    <th>Date Joined</th>\r\n                                    <th>Delete MyData</th>\r\n                              </tr>\r\n                              <tr>\r\n                                    <td>{userDetails.name}</td>\r\n                                    <td>{userDetails.email}</td>\r\n                                    {/* <td>{userDetails.decryptedPassword}</td> */}\r\n                                    <td>{userDetails.date}</td>\r\n                                    <td>\r\n                                          <button onClick={deleteMyData} className=\"button\">\r\n                                                ❌\r\n                                          </button>\r\n                                    </td>\r\n                              </tr>\r\n                        </tbody>\r\n                  </table>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default MyData;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Login from \"./Login\";\r\nimport SignUp from \"./SignUp\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport LandingPage from \"./LandingPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectEmail, selectName, select_id } from \"./features/user/userSlice\";\r\nimport MyData from \"./MyData\";\r\n\r\nfunction App() {\r\n      // const state = useSelector(selecteState);\r\n      const _id = useSelector(select_id);\r\n      const name = useSelector(selectName);\r\n      const email = useSelector(selectEmail);\r\n      return (\r\n            <Router>\r\n                  <div className=\"app\">\r\n                        <Switch>\r\n                              <Route path=\"/signup\">\r\n                                    <SignUp />\r\n                              </Route>\r\n                              <Route path=\"/MyData/:id\">\r\n                                    <MyData />\r\n                              </Route>\r\n                              <Route exact path=\"/landingpage\">\r\n                                    <LandingPage _id={_id} name={name} email={email} />\r\n                              </Route>\r\n                              <Route path=\"/\">\r\n                                    <Login />\r\n                              </Route>\r\n                        </Switch>\r\n                  </div>\r\n            </Router>\r\n      );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/user/userSlice\";\r\n\r\nexport default configureStore({\r\n      reducer: {\r\n            user: userReducer,\r\n      },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}